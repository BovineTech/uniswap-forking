diff --git a/node_modules/@uniswap/smart-order-router/README.md b/node_modules/@uniswap/smart-order-router/README.md
index 6e8bcdc..a258ee4 100644
--- a/node_modules/@uniswap/smart-order-router/README.md
+++ b/node_modules/@uniswap/smart-order-router/README.md
@@ -197,7 +197,7 @@ Total ticks crossed: 7
 ## Polygon Mainnet
 
 ```
-./bin/cli quote --tokenIn 0x2791bca1f2de4661ed88a30c99a7a9449aa84174 --tokenOut 0x7ceb23fd6bc0add59e62ac25578270cff1b9f619 --amount 5 --exactIn --minSplits 1 --protocols v3 --router alpha --chainId 137
+./bin/cli quote --tokenIn 0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359 --tokenOut 0x7ceb23fd6bc0add59e62ac25578270cff1b9f619 --amount 5 --exactIn --minSplits 1 --protocols v3 --router alpha --chainId 137
 ```
 
 ## Celo Mainnet
diff --git a/node_modules/@uniswap/smart-order-router/build/main/providers/token-provider.js b/node_modules/@uniswap/smart-order-router/build/main/providers/token-provider.js
index 80da1f0..8afd0f8 100644
--- a/node_modules/@uniswap/smart-order-router/build/main/providers/token-provider.js
+++ b/node_modules/@uniswap/smart-order-router/build/main/providers/token-provider.js
@@ -48,7 +48,7 @@ exports.USDC_ARBITRUM_GOERLI = new sdk_core_1.Token(sdk_core_1.ChainId.ARBITRUM_
 //polygon tokens
 exports.WMATIC_POLYGON = new sdk_core_1.Token(sdk_core_1.ChainId.POLYGON, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC');
 exports.WETH_POLYGON = new sdk_core_1.Token(sdk_core_1.ChainId.POLYGON, '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619', 18, 'WETH', 'Wrapped Ether');
-exports.USDC_POLYGON = new sdk_core_1.Token(sdk_core_1.ChainId.POLYGON, '0x2791bca1f2de4661ed88a30c99a7a9449aa84174', 6, 'USDC', 'USD//C');
+exports.USDC_POLYGON = new sdk_core_1.Token(sdk_core_1.ChainId.POLYGON, '0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359', 6, 'USDC', 'USD//C');
 exports.DAI_POLYGON = new sdk_core_1.Token(sdk_core_1.ChainId.POLYGON, '0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063', 18, 'DAI', 'Dai Stablecoin');
 //polygon mumbai tokens
 exports.WMATIC_POLYGON_MUMBAI = new sdk_core_1.Token(sdk_core_1.ChainId.POLYGON_MUMBAI, '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889', 18, 'WMATIC', 'Wrapped MATIC');
diff --git a/node_modules/@uniswap/smart-order-router/build/main/types/other/factories/SwapRouter02__factory.js b/node_modules/@uniswap/smart-order-router/build/main/types/other/factories/SwapRouter02__factory.js
index 2e51411..e90e627 100644
--- a/node_modules/@uniswap/smart-order-router/build/main/types/other/factories/SwapRouter02__factory.js
+++ b/node_modules/@uniswap/smart-order-router/build/main/types/other/factories/SwapRouter02__factory.js
@@ -963,7 +963,7 @@ const _abi = [
                 type: "bytes",
             },
         ],
-        name: "uniswapV3SwapCallback",
+        name: "bambaswapV3SwapCallback",
         outputs: [],
         stateMutability: "nonpayable",
         type: "function",
diff --git a/node_modules/@uniswap/smart-order-router/build/module/providers/caching-token-provider.js b/node_modules/@uniswap/smart-order-router/build/module/providers/caching-token-provider.js
index eff50f4..710ce58 100644
--- a/node_modules/@uniswap/smart-order-router/build/module/providers/caching-token-provider.js
+++ b/node_modules/@uniswap/smart-order-router/build/module/providers/caching-token-provider.js
@@ -1,7 +1,7 @@
 import { ChainId, Token } from '@uniswap/sdk-core';
 import _ from 'lodash';
 import { log, WRAPPED_NATIVE_CURRENCY } from '../util';
-import { BTC_BNB, BUSD_BNB, CELO, CELO_ALFAJORES, CEUR_CELO, CUSD_CELO, CUSD_CELO_ALFAJORES, DAI_ARBITRUM, DAI_AVAX, DAI_BNB, DAI_CELO, DAI_CELO_ALFAJORES, DAI_MAINNET, DAI_MOONBEAM, DAI_OPTIMISM, DAI_OPTIMISM_GOERLI, DAI_POLYGON_MUMBAI, ETH_BNB, USDC_ARBITRUM, USDC_ARBITRUM_GOERLI, USDC_AVAX, USDC_BASE, USDC_BNB, USDC_ETHEREUM_GNOSIS, USDC_MAINNET, USDC_MOONBEAM, USDC_OPTIMISM, USDC_OPTIMISM_GOERLI, USDC_POLYGON, USDC_SEPOLIA, USDT_ARBITRUM, USDT_BNB, USDT_MAINNET, USDT_OPTIMISM, USDT_OPTIMISM_GOERLI, WBTC_ARBITRUM, WBTC_MAINNET, WBTC_MOONBEAM, WBTC_OPTIMISM, WBTC_OPTIMISM_GOERLI, WMATIC_POLYGON, WMATIC_POLYGON_MUMBAI, } from './token-provider';
+import { USDC_LINEA, USDT_LINEA, WBTC_LINEA, DAI_LINEA, BTC_BNB, BUSD_BNB, CELO, CELO_ALFAJORES, CEUR_CELO, CUSD_CELO, CUSD_CELO_ALFAJORES, DAI_ARBITRUM, DAI_AVAX, DAI_BNB, DAI_CELO, DAI_CELO_ALFAJORES, DAI_MAINNET, DAI_MOONBEAM, DAI_OPTIMISM, DAI_OPTIMISM_GOERLI, DAI_POLYGON_MUMBAI, ETH_BNB, USDC_ARBITRUM, USDC_ARBITRUM_GOERLI, USDC_AVAX, USDC_BASE, USDC_BNB, USDC_ETHEREUM_GNOSIS, USDC_MAINNET, USDC_MOONBEAM, USDC_OPTIMISM, USDC_OPTIMISM_GOERLI, USDC_POLYGON, USDC_SEPOLIA, USDT_ARBITRUM, USDT_BNB, USDT_MAINNET, USDT_OPTIMISM, USDT_OPTIMISM_GOERLI, WBTC_ARBITRUM, WBTC_MAINNET, WBTC_MOONBEAM, WBTC_OPTIMISM, WBTC_OPTIMISM_GOERLI, WMATIC_POLYGON, WMATIC_POLYGON_MUMBAI, } from './token-provider';
 // These tokens will added to the Token cache on initialization.
 export const CACHE_SEED_TOKENS = {
     [ChainId.MAINNET]: {
@@ -15,6 +15,12 @@ export const CACHE_SEED_TOKENS = {
         // This workaround adds it to the cache, so we won't try to fetch it on-chain.
         RING: new Token(ChainId.MAINNET, '0x9469D013805bFfB7D3DEBe5E7839237e535ec483', 18, 'RING', 'RING'),
     },
+    [ChainId.LINEA]: {
+        USDC: USDC_LINEA,
+        USDT: USDT_LINEA,
+        WBTC: WBTC_LINEA,
+        DAI: DAI_LINEA,
+    },
     [ChainId.SEPOLIA]: {
         USDC: USDC_SEPOLIA,
     },
diff --git a/node_modules/@uniswap/smart-order-router/build/module/providers/on-chain-quote-provider.js b/node_modules/@uniswap/smart-order-router/build/module/providers/on-chain-quote-provider.js
index f14fe5a..b69526a 100644
--- a/node_modules/@uniswap/smart-order-router/build/module/providers/on-chain-quote-provider.js
+++ b/node_modules/@uniswap/smart-order-router/build/module/providers/on-chain-quote-provider.js
@@ -150,6 +150,7 @@ export class OnChainQuoteProvider {
         const { baseBlockOffset, rollback } = this.blockNumberConfig;
         // Apply the base block offset if provided
         const originalBlockNumber = await this.provider.getBlockNumber();
+
         const providerConfig = {
             ..._providerConfig,
             blockNumber: (_a = _providerConfig === null || _providerConfig === void 0 ? void 0 : _providerConfig.blockNumber) !== null && _a !== void 0 ? _a : originalBlockNumber + baseBlockOffset,
@@ -169,6 +170,7 @@ export class OnChainQuoteProvider {
             return routeInputs;
         })
             .value();
+
         const normalizedChunk = Math.ceil(inputs.length / Math.ceil(inputs.length / multicallChunk));
         const inputsChunked = _.chunk(inputs, normalizedChunk);
         let quoteStates = _.map(inputsChunked, (inputChunk) => {
diff --git a/node_modules/@uniswap/smart-order-router/build/module/providers/token-provider.js b/node_modules/@uniswap/smart-order-router/build/module/providers/token-provider.js
index 3b1efd9..2c436f6 100644
--- a/node_modules/@uniswap/smart-order-router/build/module/providers/token-provider.js
+++ b/node_modules/@uniswap/smart-order-router/build/module/providers/token-provider.js
@@ -9,6 +9,10 @@ export const USDC_MAINNET = new Token(ChainId.MAINNET, '0xA0b86991c6218b36c1d19D
 export const USDT_MAINNET = new Token(ChainId.MAINNET, '0xdAC17F958D2ee523a2206206994597C13D831ec7', 6, 'USDT', 'Tether USD');
 export const WBTC_MAINNET = new Token(ChainId.MAINNET, '0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599', 8, 'WBTC', 'Wrapped BTC');
 export const DAI_MAINNET = new Token(ChainId.MAINNET, '0x6B175474E89094C44Da98b954EedeAC495271d0F', 18, 'DAI', 'Dai Stablecoin');
+export const USDC_LINEA = new Token(ChainId.LINEA, '0x176211869cA2b568f2A7D4EE941E073a821EE1ff', 6, 'USDC', 'USD//C');
+export const USDT_LINEA = new Token(ChainId.LINEA, '0xA219439258ca9da29E9Cc4cE5596924745e12B93', 6, 'USDT', 'Tether USD');
+export const WBTC_LINEA = new Token(ChainId.LINEA, '0x3aAB2285ddcDdaD8edf438C1bAB47e1a9D05a9b4', 8, 'WBTC', 'Wrapped BTC');
+export const DAI_LINEA = new Token(ChainId.LINEA, '0x4AF15ec2A0BD43Db75dd04E62FAA3B8EF36b00d5', 18, 'DAI', 'Dai Stablecoin');
 export const FEI_MAINNET = new Token(ChainId.MAINNET, '0x956F47F50A910163D8BF957Cf5846D573E7f87CA', 18, 'FEI', 'Fei USD');
 export const UNI_MAINNET = new Token(ChainId.MAINNET, '0x1f9840a85d5af5bf1d1762f925bdaddc4201f984', 18, 'UNI', 'Uniswap');
 export const AAVE_MAINNET = new Token(ChainId.MAINNET, '0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9', 18, 'AAVE', 'Aave Token');
@@ -41,7 +45,7 @@ export const USDC_ARBITRUM_GOERLI = new Token(ChainId.ARBITRUM_GOERLI, '0x8FB1E3
 //polygon tokens
 export const WMATIC_POLYGON = new Token(ChainId.POLYGON, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC');
 export const WETH_POLYGON = new Token(ChainId.POLYGON, '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619', 18, 'WETH', 'Wrapped Ether');
-export const USDC_POLYGON = new Token(ChainId.POLYGON, '0x2791bca1f2de4661ed88a30c99a7a9449aa84174', 6, 'USDC', 'USD//C');
+export const USDC_POLYGON = new Token(ChainId.POLYGON, '0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359', 6, 'USDC', 'USD//C');
 export const DAI_POLYGON = new Token(ChainId.POLYGON, '0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063', 18, 'DAI', 'Dai Stablecoin');
 //polygon mumbai tokens
 export const WMATIC_POLYGON_MUMBAI = new Token(ChainId.POLYGON_MUMBAI, '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889', 18, 'WMATIC', 'Wrapped MATIC');
@@ -193,6 +197,8 @@ export const DAI_ON = (chainId) => {
     switch (chainId) {
         case ChainId.MAINNET:
             return DAI_MAINNET;
+        case ChainId.LINEA:
+            return DAI_LINEA;
         case ChainId.GOERLI:
             return DAI_GOERLI;
         case ChainId.SEPOLIA:
@@ -227,6 +233,8 @@ export const USDT_ON = (chainId) => {
     switch (chainId) {
         case ChainId.MAINNET:
             return USDT_MAINNET;
+        case ChainId.LINEA:
+            return USDT_LINEA;
         case ChainId.GOERLI:
             return USDT_GOERLI;
         case ChainId.OPTIMISM:
@@ -245,6 +253,8 @@ export const USDC_ON = (chainId) => {
     switch (chainId) {
         case ChainId.MAINNET:
             return USDC_MAINNET;
+        case ChainId.LINEA:
+            return USDC_LINEA;
         case ChainId.GOERLI:
             return USDC_GOERLI;
         case ChainId.SEPOLIA:
diff --git a/node_modules/@uniswap/smart-order-router/build/module/providers/v3/static-subgraph-provider.js b/node_modules/@uniswap/smart-order-router/build/module/providers/v3/static-subgraph-provider.js
index 26f8306..fddac1b 100644
--- a/node_modules/@uniswap/smart-order-router/build/module/providers/v3/static-subgraph-provider.js
+++ b/node_modules/@uniswap/smart-order-router/build/module/providers/v3/static-subgraph-provider.js
@@ -6,7 +6,7 @@ import _ from 'lodash';
 import { unparseFeeAmount } from '../../util/amounts';
 import { WRAPPED_NATIVE_CURRENCY } from '../../util/chains';
 import { log } from '../../util/log';
-import { ARB_ARBITRUM, BTC_BNB, BUSD_BNB, CELO, CELO_ALFAJORES, CEUR_CELO, CEUR_CELO_ALFAJORES, CUSD_CELO, CUSD_CELO_ALFAJORES, DAI_ARBITRUM, DAI_AVAX, DAI_BNB, DAI_CELO, DAI_CELO_ALFAJORES, DAI_GOERLI, DAI_MAINNET, DAI_MOONBEAM, DAI_OPTIMISM, DAI_OPTIMISM_GOERLI, DAI_POLYGON_MUMBAI, ETH_BNB, OP_OPTIMISM, USDC_ARBITRUM, USDC_ARBITRUM_GOERLI, USDC_AVAX, USDC_BASE, USDC_BNB, USDC_ETHEREUM_GNOSIS, USDC_GOERLI, USDC_MAINNET, USDC_MOONBEAM, USDC_OPTIMISM, USDC_OPTIMISM_GOERLI, USDC_POLYGON, USDC_SEPOLIA, USDT_ARBITRUM, USDT_BNB, USDT_GOERLI, USDT_MAINNET, USDT_OPTIMISM, USDT_OPTIMISM_GOERLI, WBTC_ARBITRUM, WBTC_GNOSIS, WBTC_GOERLI, WBTC_MAINNET, WBTC_MOONBEAM, WBTC_OPTIMISM, WBTC_OPTIMISM_GOERLI, WETH_POLYGON, WMATIC_POLYGON, WMATIC_POLYGON_MUMBAI, WXDAI_GNOSIS } from '../token-provider';
+import { DAI_LINEA, USDC_LINEA, USDT_LINEA, WBTC_LINEA, ARB_ARBITRUM, BTC_BNB, BUSD_BNB, CELO, CELO_ALFAJORES, CEUR_CELO, CEUR_CELO_ALFAJORES, CUSD_CELO, CUSD_CELO_ALFAJORES, DAI_ARBITRUM, DAI_AVAX, DAI_BNB, DAI_CELO, DAI_CELO_ALFAJORES, DAI_GOERLI, DAI_MAINNET, DAI_MOONBEAM, DAI_OPTIMISM, DAI_OPTIMISM_GOERLI, DAI_POLYGON_MUMBAI, ETH_BNB, OP_OPTIMISM, USDC_ARBITRUM, USDC_ARBITRUM_GOERLI, USDC_AVAX, USDC_BASE, USDC_BNB, USDC_ETHEREUM_GNOSIS, USDC_GOERLI, USDC_MAINNET, USDC_MOONBEAM, USDC_OPTIMISM, USDC_OPTIMISM_GOERLI, USDC_POLYGON, USDC_SEPOLIA, USDT_ARBITRUM, USDT_BNB, USDT_GOERLI, USDT_MAINNET, USDT_OPTIMISM, USDT_OPTIMISM_GOERLI, WBTC_ARBITRUM, WBTC_GNOSIS, WBTC_GOERLI, WBTC_MAINNET, WBTC_MOONBEAM, WBTC_OPTIMISM, WBTC_OPTIMISM_GOERLI, WETH_POLYGON, WMATIC_POLYGON, WMATIC_POLYGON_MUMBAI, WXDAI_GNOSIS } from '../token-provider';
 const BASES_TO_CHECK_TRADES_AGAINST = {
     [ChainId.MAINNET]: [
         WRAPPED_NATIVE_CURRENCY[ChainId.MAINNET],
@@ -15,6 +15,13 @@ const BASES_TO_CHECK_TRADES_AGAINST = {
         USDT_MAINNET,
         WBTC_MAINNET
     ],
+    [ChainId.LINEA]: [
+        WRAPPED_NATIVE_CURRENCY[ChainId.LINEA],
+        DAI_LINEA,
+        USDC_LINEA,
+        USDT_LINEA,
+        WBTC_LINEA
+    ],
     [ChainId.GOERLI]: [
         WRAPPED_NATIVE_CURRENCY[ChainId.GOERLI],
         USDT_GOERLI,
diff --git a/node_modules/@uniswap/smart-order-router/build/module/routers/alpha-router/functions/get-candidate-pools.js b/node_modules/@uniswap/smart-order-router/build/module/routers/alpha-router/functions/get-candidate-pools.js
index e7bc620..99869be 100644
--- a/node_modules/@uniswap/smart-order-router/build/module/routers/alpha-router/functions/get-candidate-pools.js
+++ b/node_modules/@uniswap/smart-order-router/build/module/routers/alpha-router/functions/get-candidate-pools.js
@@ -2,7 +2,7 @@ import { Protocol } from '@uniswap/router-sdk';
 import { ChainId, TradeType } from '@uniswap/sdk-core';
 import { FeeAmount } from '@uniswap/v3-sdk';
 import _ from 'lodash';
-import { CELO, CELO_ALFAJORES, CEUR_CELO, CEUR_CELO_ALFAJORES, CUSD_CELO, CUSD_CELO_ALFAJORES, DAI_ARBITRUM, DAI_AVAX, DAI_BNB, DAI_MAINNET, DAI_MOONBEAM, DAI_OPTIMISM, DAI_OPTIMISM_GOERLI, DAI_POLYGON_MUMBAI, DAI_SEPOLIA, FEI_MAINNET, USDC_ARBITRUM, USDC_ARBITRUM_GOERLI, USDC_AVAX, USDC_BASE, USDC_BNB, USDC_ETHEREUM_GNOSIS, USDC_MAINNET, USDC_MOONBEAM, USDC_OPTIMISM, USDC_OPTIMISM_GOERLI, USDC_POLYGON, USDC_SEPOLIA, USDT_ARBITRUM, USDT_BNB, USDT_MAINNET, USDT_OPTIMISM, USDT_OPTIMISM_GOERLI, WBTC_ARBITRUM, WBTC_GNOSIS, WBTC_MAINNET, WBTC_MOONBEAM, WBTC_OPTIMISM, WBTC_OPTIMISM_GOERLI, WGLMR_MOONBEAM, WMATIC_POLYGON, WMATIC_POLYGON_MUMBAI, WXDAI_GNOSIS, } from '../../../providers/token-provider';
+import { DAI_LINEA, USDC_LINEA, WBTC_LINEA, USDT_LINEA, CELO, CELO_ALFAJORES, CEUR_CELO, CEUR_CELO_ALFAJORES, CUSD_CELO, CUSD_CELO_ALFAJORES, DAI_ARBITRUM, DAI_AVAX, DAI_BNB, DAI_MAINNET, DAI_MOONBEAM, DAI_OPTIMISM, DAI_OPTIMISM_GOERLI, DAI_POLYGON_MUMBAI, DAI_SEPOLIA, FEI_MAINNET, USDC_ARBITRUM, USDC_ARBITRUM_GOERLI, USDC_AVAX, USDC_BASE, USDC_BNB, USDC_ETHEREUM_GNOSIS, USDC_MAINNET, USDC_MOONBEAM, USDC_OPTIMISM, USDC_OPTIMISM_GOERLI, USDC_POLYGON, USDC_SEPOLIA, USDT_ARBITRUM, USDT_BNB, USDT_MAINNET, USDT_OPTIMISM, USDT_OPTIMISM_GOERLI, WBTC_ARBITRUM, WBTC_GNOSIS, WBTC_MAINNET, WBTC_MOONBEAM, WBTC_OPTIMISM, WBTC_OPTIMISM_GOERLI, WGLMR_MOONBEAM, WMATIC_POLYGON, WMATIC_POLYGON_MUMBAI, WXDAI_GNOSIS, } from '../../../providers/token-provider';
 import { WRAPPED_NATIVE_CURRENCY } from '../../../util';
 import { parseFeeAmount, unparseFeeAmount } from '../../../util/amounts';
 import { log } from '../../../util/log';
@@ -16,6 +16,12 @@ const baseTokensByChain = {
         WRAPPED_NATIVE_CURRENCY[1],
         FEI_MAINNET,
     ],
+    [ChainId.LINEA]: [
+        DAI_LINEA,
+        USDC_LINEA,
+        WBTC_LINEA,
+        USDT_LINEA,
+    ],
     [ChainId.OPTIMISM]: [
         DAI_OPTIMISM,
         USDC_OPTIMISM,
diff --git a/node_modules/@uniswap/smart-order-router/build/module/routers/alpha-router/gas-models/gas-model.js b/node_modules/@uniswap/smart-order-router/build/module/routers/alpha-router/gas-models/gas-model.js
index 97cba0c..7543a8a 100644
--- a/node_modules/@uniswap/smart-order-router/build/module/routers/alpha-router/gas-models/gas-model.js
+++ b/node_modules/@uniswap/smart-order-router/build/module/routers/alpha-router/gas-models/gas-model.js
@@ -1,10 +1,11 @@
 import { ChainId } from '@uniswap/sdk-core';
-import { CUSD_CELO, CUSD_CELO_ALFAJORES, DAI_ARBITRUM, DAI_AVAX, DAI_BNB, DAI_GOERLI, DAI_MAINNET, DAI_OPTIMISM, DAI_OPTIMISM_GOERLI, DAI_POLYGON_MUMBAI, DAI_SEPOLIA, USDC_ARBITRUM, USDC_ARBITRUM_GOERLI, USDC_AVAX, USDC_BASE, USDC_BNB, USDC_ETHEREUM_GNOSIS, USDC_GOERLI, USDC_MAINNET, USDC_MOONBEAM, USDC_OPTIMISM, USDC_OPTIMISM_GOERLI, USDC_POLYGON, USDC_SEPOLIA, USDT_ARBITRUM, USDT_BNB, USDT_GOERLI, USDT_MAINNET, USDT_OPTIMISM, USDT_OPTIMISM_GOERLI, WBTC_GOERLI, } from '../../../providers/token-provider';
+import { CUSD_CELO, CUSD_CELO_ALFAJORES, DAI_LINEA, DAI_ARBITRUM, DAI_AVAX, DAI_BNB, DAI_GOERLI, DAI_MAINNET, DAI_OPTIMISM, DAI_OPTIMISM_GOERLI, DAI_POLYGON_MUMBAI, DAI_SEPOLIA, USDC_LINEA, USDC_ARBITRUM, USDC_ARBITRUM_GOERLI, USDC_AVAX, USDC_BASE, USDC_BNB, USDC_ETHEREUM_GNOSIS, USDC_GOERLI, USDC_MAINNET, USDC_MOONBEAM, USDC_OPTIMISM, USDC_OPTIMISM_GOERLI, USDC_POLYGON, USDC_SEPOLIA, USDT_LINEA, USDT_ARBITRUM, USDT_BNB, USDT_GOERLI, USDT_MAINNET, USDT_OPTIMISM, USDT_OPTIMISM_GOERLI, WBTC_GOERLI, } from '../../../providers/token-provider';
 // When adding new usd gas tokens, ensure the tokens are ordered 
 // from tokens with highest decimals to lowest decimals. For example,
 // DAI_AVAX has 18 decimals and comes before USDC_AVAX which has 6 decimals.
 export const usdGasTokensByChain = {
     [ChainId.MAINNET]: [DAI_MAINNET, USDC_MAINNET, USDT_MAINNET],
+    [ChainId.LINEA]: [DAI_LINEA, USDC_LINEA, USDT_LINEA],
     [ChainId.ARBITRUM_ONE]: [DAI_ARBITRUM, USDC_ARBITRUM, USDT_ARBITRUM],
     [ChainId.OPTIMISM]: [DAI_OPTIMISM, USDC_OPTIMISM, USDT_OPTIMISM],
     [ChainId.OPTIMISM_GOERLI]: [
diff --git a/node_modules/@uniswap/smart-order-router/build/module/routers/alpha-router/gas-models/v3/gas-costs.js b/node_modules/@uniswap/smart-order-router/build/module/routers/alpha-router/gas-models/v3/gas-costs.js
index 542d9e5..a9b94f5 100644
--- a/node_modules/@uniswap/smart-order-router/build/module/routers/alpha-router/gas-models/v3/gas-costs.js
+++ b/node_modules/@uniswap/smart-order-router/build/module/routers/alpha-router/gas-models/v3/gas-costs.js
@@ -9,6 +9,7 @@ export const BASE_SWAP_COST = (id) => {
         case ChainId.MAINNET:
         case ChainId.GOERLI:
         case ChainId.SEPOLIA:
+        case ChainId.LINEA:
         case ChainId.OPTIMISM:
         case ChainId.OPTIMISM_GOERLI:
         case ChainId.BNB:
@@ -40,6 +41,7 @@ export const COST_PER_INIT_TICK = (id) => {
         case ChainId.BNB:
         case ChainId.AVALANCHE:
             return BigNumber.from(31000);
+        case ChainId.LINEA:
         case ChainId.OPTIMISM:
         case ChainId.OPTIMISM_GOERLI:
         case ChainId.BASE:
@@ -63,6 +65,7 @@ export const COST_PER_INIT_TICK = (id) => {
 export const COST_PER_HOP = (id) => {
     switch (id) {
         case ChainId.MAINNET:
+        case ChainId.LINEA:
         case ChainId.GOERLI:
         case ChainId.SEPOLIA:
         case ChainId.BNB:
diff --git a/node_modules/@uniswap/smart-order-router/build/module/routers/legacy-router/bases.js b/node_modules/@uniswap/smart-order-router/build/module/routers/legacy-router/bases.js
index b0702eb..d009d54 100644
--- a/node_modules/@uniswap/smart-order-router/build/module/routers/legacy-router/bases.js
+++ b/node_modules/@uniswap/smart-order-router/build/module/routers/legacy-router/bases.js
@@ -11,6 +11,7 @@ export const BASES_TO_CHECK_TRADES_AGAINST = (_tokenProvider) => {
             USDT_MAINNET,
             WBTC_MAINNET,
         ],
+        [ChainId.LINEA]: [WRAPPED_NATIVE_CURRENCY[ChainId.LINEA]],
         [ChainId.GOERLI]: [WRAPPED_NATIVE_CURRENCY[ChainId.GOERLI]],
         [ChainId.SEPOLIA]: [WRAPPED_NATIVE_CURRENCY[ChainId.SEPOLIA]],
         [ChainId.OPTIMISM]: [WRAPPED_NATIVE_CURRENCY[ChainId.OPTIMISM]],
diff --git a/node_modules/@uniswap/smart-order-router/build/module/types/other/factories/SwapRouter02__factory.js b/node_modules/@uniswap/smart-order-router/build/module/types/other/factories/SwapRouter02__factory.js
index 212868c..f99503f 100644
--- a/node_modules/@uniswap/smart-order-router/build/module/types/other/factories/SwapRouter02__factory.js
+++ b/node_modules/@uniswap/smart-order-router/build/module/types/other/factories/SwapRouter02__factory.js
@@ -960,7 +960,7 @@ const _abi = [
                 type: "bytes",
             },
         ],
-        name: "uniswapV3SwapCallback",
+        name: "bambaswapV3SwapCallback",
         outputs: [],
         stateMutability: "nonpayable",
         type: "function",
diff --git a/node_modules/@uniswap/smart-order-router/build/module/util/addresses.js b/node_modules/@uniswap/smart-order-router/build/module/util/addresses.js
index 2a85de3..9e888b6 100644
--- a/node_modules/@uniswap/smart-order-router/build/module/util/addresses.js
+++ b/node_modules/@uniswap/smart-order-router/build/module/util/addresses.js
@@ -1,4 +1,4 @@
-import { CHAIN_TO_ADDRESSES_MAP, ChainId, Token } from '@uniswap/sdk-core';
+import sdk_core_1, { CHAIN_TO_ADDRESSES_MAP, ChainId, Token } from '@uniswap/sdk-core';
 import { FACTORY_ADDRESS } from '@uniswap/v3-sdk';
 import { NETWORKS_WITH_SAME_UNISWAP_ADDRESSES } from './chains';
 export const BNB_TICK_LENS_ADDRESS = CHAIN_TO_ADDRESSES_MAP[ChainId.BNB].tickLensAddress;
@@ -8,6 +8,8 @@ export const BNB_SWAP_ROUTER_02_ADDRESS = CHAIN_TO_ADDRESSES_MAP[ChainId.BNB].sw
 export const BNB_V3_MIGRATOR_ADDRESS = CHAIN_TO_ADDRESSES_MAP[ChainId.BNB].v3MigratorAddress;
 export const V3_CORE_FACTORY_ADDRESSES = {
     ...constructSameAddressMap(FACTORY_ADDRESS),
+    [ChainId.LINEA]: CHAIN_TO_ADDRESSES_MAP[ChainId.LINEA].v3CoreFactoryAddress,
+    [ChainId.POLYGON]: CHAIN_TO_ADDRESSES_MAP[ChainId.POLYGON].v3CoreFactoryAddress,
     [ChainId.CELO]: CHAIN_TO_ADDRESSES_MAP[ChainId.CELO].v3CoreFactoryAddress,
     [ChainId.CELO_ALFAJORES]: CHAIN_TO_ADDRESSES_MAP[ChainId.CELO_ALFAJORES].v3CoreFactoryAddress,
     [ChainId.OPTIMISM_GOERLI]: CHAIN_TO_ADDRESSES_MAP[ChainId.OPTIMISM_GOERLI].v3CoreFactoryAddress,
@@ -21,6 +23,8 @@ export const V3_CORE_FACTORY_ADDRESSES = {
 };
 export const QUOTER_V2_ADDRESSES = {
     ...constructSameAddressMap('0x61fFE014bA17989E743c5F6cB21bF9697530B21e'),
+    [ChainId.LINEA]: CHAIN_TO_ADDRESSES_MAP[ChainId.LINEA].quoterAddress,
+    [ChainId.POLYGON]: CHAIN_TO_ADDRESSES_MAP[ChainId.POLYGON].quoterAddress,
     [ChainId.CELO]: CHAIN_TO_ADDRESSES_MAP[ChainId.CELO].quoterAddress,
     [ChainId.CELO_ALFAJORES]: CHAIN_TO_ADDRESSES_MAP[ChainId.CELO_ALFAJORES].quoterAddress,
     [ChainId.OPTIMISM_GOERLI]: CHAIN_TO_ADDRESSES_MAP[ChainId.OPTIMISM_GOERLI].quoterAddress,
@@ -38,6 +42,8 @@ export const MIXED_ROUTE_QUOTER_V1_ADDRESSES = {
 };
 export const UNISWAP_MULTICALL_ADDRESSES = {
     ...constructSameAddressMap('0x1F98415757620B543A52E61c46B32eB19261F984'),
+    [ChainId.LINEA]: CHAIN_TO_ADDRESSES_MAP[ChainId.LINEA].multicallAddress,
+    [ChainId.POLYGON]: CHAIN_TO_ADDRESSES_MAP[ChainId.POLYGON].multicallAddress,
     [ChainId.CELO]: CHAIN_TO_ADDRESSES_MAP[ChainId.CELO].multicallAddress,
     [ChainId.CELO_ALFAJORES]: CHAIN_TO_ADDRESSES_MAP[ChainId.CELO_ALFAJORES].multicallAddress,
     [ChainId.OPTIMISM_GOERLI]: CHAIN_TO_ADDRESSES_MAP[ChainId.OPTIMISM_GOERLI].multicallAddress,
@@ -58,9 +64,13 @@ export const SWAP_ROUTER_02_ADDRESSES = (chainId) => {
 export const OVM_GASPRICE_ADDRESS = '0x420000000000000000000000000000000000000F';
 export const ARB_GASINFO_ADDRESS = '0x000000000000000000000000000000000000006C';
 export const TICK_LENS_ADDRESS = CHAIN_TO_ADDRESSES_MAP[ChainId.ARBITRUM_ONE].tickLensAddress;
+export const TICK_LENS_LINEA_ADDRESS = '0xf48421D0b4937Ea6085d7360F9e4991A9d23D85A';
 export const NONFUNGIBLE_POSITION_MANAGER_ADDRESS = CHAIN_TO_ADDRESSES_MAP[ChainId.MAINNET].nonfungiblePositionManagerAddress;
+export const NONFUNGIBLE_POSITION_MANAGER_LINEA_ADDRESS = '0x644e684ca102CA52aAeCf657877eC5203F522e4B';
 export const V3_MIGRATOR_ADDRESS = CHAIN_TO_ADDRESSES_MAP[ChainId.MAINNET].v3MigratorAddress;
 export const MULTICALL2_ADDRESS = '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696';
+export const MULTICALL2_LINEA_ADDRESS = '0x1669f9D2C0c8eD88f703357b18e403095ceB29bE';
+
 export function constructSameAddressMap(address, additionalNetworks = []) {
     return NETWORKS_WITH_SAME_UNISWAP_ADDRESSES.concat(additionalNetworks).reduce((memo, chainId) => {
         memo[chainId] = address;
@@ -69,6 +79,7 @@ export function constructSameAddressMap(address, additionalNetworks = []) {
 }
 export const WETH9 = {
     [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),
+    [ChainId.LINEA]: new Token(ChainId.LINEA, '0xe5D7C2a44FfDDf6b295A15c148167daaAf5Cf34f', 18, 'WETH', 'Wrapped Ether'),
     [ChainId.GOERLI]: new Token(ChainId.GOERLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),
     [ChainId.SEPOLIA]: new Token(ChainId.SEPOLIA, '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14', 18, 'WETH', 'Wrapped Ether'),
     [ChainId.OPTIMISM]: new Token(ChainId.OPTIMISM, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),
diff --git a/node_modules/@uniswap/smart-order-router/build/module/util/chains.js b/node_modules/@uniswap/smart-order-router/build/module/util/chains.js
index 78fd5d1..91f7141 100644
--- a/node_modules/@uniswap/smart-order-router/build/module/util/chains.js
+++ b/node_modules/@uniswap/smart-order-router/build/module/util/chains.js
@@ -2,6 +2,7 @@ import { ChainId, Ether, NativeCurrency, Token } from '@uniswap/sdk-core';
 // WIP: Gnosis, Moonbeam
 export const SUPPORTED_CHAINS = [
     ChainId.MAINNET,
+    ChainId.LINEA,
     ChainId.OPTIMISM,
     ChainId.OPTIMISM_GOERLI,
     ChainId.ARBITRUM_ONE,
@@ -35,13 +36,14 @@ export const NETWORKS_WITH_SAME_UNISWAP_ADDRESSES = [
     ChainId.GOERLI,
     ChainId.OPTIMISM,
     ChainId.ARBITRUM_ONE,
-    ChainId.POLYGON,
     ChainId.POLYGON_MUMBAI,
 ];
 export const ID_TO_CHAIN_ID = (id) => {
     switch (id) {
         case 1:
             return ChainId.MAINNET;
+        case 59144:
+            return ChainId.LINEA;
         case 5:
             return ChainId.GOERLI;
         case 11155111:
@@ -81,6 +83,7 @@ export const ID_TO_CHAIN_ID = (id) => {
 export var ChainName;
 (function (ChainName) {
     ChainName["MAINNET"] = "mainnet";
+    ChainName["LINEA"] = "linea";
     ChainName["GOERLI"] = "goerli";
     ChainName["SEPOLIA"] = "sepolia";
     ChainName["OPTIMISM"] = "optimism-mainnet";
@@ -115,6 +118,11 @@ export const NATIVE_NAMES_BY_ID = {
         'ETHER',
         '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',
     ],
+    [ChainId.LINEA]: [
+        'ETH',
+        'ETHER',
+        '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',
+    ],
     [ChainId.GOERLI]: [
         'ETH',
         'ETHER',
@@ -174,6 +182,7 @@ export const NATIVE_NAMES_BY_ID = {
 };
 export const NATIVE_CURRENCY = {
     [ChainId.MAINNET]: NativeCurrencyName.ETHER,
+    [ChainId.LINEA]: NativeCurrencyName.ETHER,
     [ChainId.GOERLI]: NativeCurrencyName.ETHER,
     [ChainId.SEPOLIA]: NativeCurrencyName.ETHER,
     [ChainId.OPTIMISM]: NativeCurrencyName.ETHER,
@@ -194,6 +203,8 @@ export const ID_TO_NETWORK_NAME = (id) => {
     switch (id) {
         case 1:
             return ChainName.MAINNET;
+        case 59144:
+            return ChainName.LINEA;
         case 5:
             return ChainName.GOERLI;
         case 11155111:
@@ -267,6 +278,7 @@ export const ID_TO_PROVIDER = (id) => {
 };
 export const WRAPPED_NATIVE_CURRENCY = {
     [ChainId.MAINNET]: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),
+    [ChainId.LINEA]: new Token(59144, '0xe5D7C2a44FfDDf6b295A15c148167daaAf5Cf34f', 18, 'WETH', 'Wrapped Ether'),
     [ChainId.GOERLI]: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),
     [ChainId.SEPOLIA]: new Token(11155111, '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14', 18, 'WETH', 'Wrapped Ether'),
     [ChainId.BNB]: new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),
